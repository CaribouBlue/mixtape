package templates

import (
	"fmt"
	"github.com/CaribouBlue/top-spot/db"
	"github.com/CaribouBlue/top-spot/spotify"
	"github.com/CaribouBlue/top-spot/utils"
	"strconv"
	"time"
)

const (
	SessionDetailsId             string = "session-details"
	SubmissionListId             string = "submission-list"
	SubmissionCounterId          string = "submission-counter"
	SubmissionSearchBarId        string = "submission-search-bar"
	SubmissionSearchBarResultsId string = "submission-search-bar-results"
)

type SessionPhase string

const (
	SubmissionPhase SessionPhase = "Submission"
	VotePhase       SessionPhase = "Vote"
	ResultsPhase    SessionPhase = "Results"
)

type SessionTemplateModel struct {
	Session      db.GameSessionDataModel
	User         db.UserDataModel
	SearchResult spotify.SearchResult
	SearchQuery  string
}

func (model SessionTemplateModel) Submissions() []db.SubmissionDataModel {
	submissions := make([]db.SubmissionDataModel, 0)
	for _, submission := range model.Session.Submissions {
		if submission.UserId == model.User.GetId() {
			submissions = append(submissions, submission)
		}
	}
	return submissions
}

func (model SessionTemplateModel) SubmissionsLeft() int {
	return model.Session.MaxSubmissions - len(model.Submissions())
}

func (model SessionTemplateModel) SessionId() string {
	return strconv.FormatInt(model.Session.Id, 10)
}

func (model SessionTemplateModel) SessionPhase() SessionPhase {
	if model.Session.SubmissionDurationLeft().Seconds() > 0 {
		return SubmissionPhase
	} else if model.Session.VoteDurationLeft().Seconds() > 0 {
		return VotePhase
	} else {
		return ResultsPhase
	}
}

func (model SessionTemplateModel) TimeLeft(phase SessionPhase) string {
	var duration time.Duration
	switch phase {
	case SubmissionPhase:
		duration = model.Session.SubmissionDurationLeft()
	case VotePhase:
		duration = model.Session.VoteDurationLeft()
	default:
		return ""
	}

	days := int(duration.Hours()) / 24
	hours := int(duration.Hours()) % 24
	minutes := int(duration.Minutes()) % 60
	_ = int(duration.Seconds()) % 60

	if duration.Seconds() <= 0 {
		return ""
	}
	return fmt.Sprintf("%02dd %02dh %02dm", days, hours, minutes)
}

func (model SessionTemplateModel) GetSubmissionVoteId(submissionId string) string {
	for _, vote := range model.Session.Votes {
		if vote.UserId == model.User.GetId() && vote.SubmissionId == submissionId {
			return vote.Id
		}
	}
	return ""
}

func (model SessionTemplateModel) IsUserSubmission(submissionId string) bool {
	for _, submission := range model.Session.Submissions {
		if submission.Id == submissionId && submission.UserId == model.User.GetId() {
			return true
		}
	}
	return false
}

func NewSessionTemplateModel(session db.GameSessionDataModel, user db.UserDataModel) SessionTemplateModel {
	return SessionTemplateModel{
		Session: session,
		User:    user,
	}
}

templ Session(model SessionTemplateModel, swapOob string) {
	@root(RootProps{Title: "Session " + model.SessionId()}) {
		<div
			id={ SessionDetailsId }
			hx-swap-oob={ swapOob }
		>
			<h1>Session { model.SessionId() }</h1>
			switch model.SessionPhase() {
				case SubmissionPhase:
					@SubmissionForm(model)
				case VotePhase:
					@VoteForm(model)
				case ResultsPhase:
					<h2>Results</h2>
			}
		</div>
	}
}

templ SessionPhaseTimeLeft(model SessionTemplateModel, phase SessionPhase) {
	if model.TimeLeft(phase) != "" {
		<p>{ model.TimeLeft(phase) } left</p>
	} else {
		@Session(model, "true")
	}
}

templ VoteForm(model SessionTemplateModel) {
	<h2>Vote</h2>
	<h3
		hx-get={ fmt.Sprintf("/app/session/%s/vote/time-left", model.SessionId()) }
		hx-trigger="load, every 1m"
	></h3>
	<ul>
		for _, submission := range model.Session.Submissions {
			@LazyLoadVoteCandidate(model, submission.Id)
		}
	</ul>
}

templ LazyLoadVoteCandidate(model SessionTemplateModel, submissionId string) {
	<li
		hx-get={ fmt.Sprintf("/app/session/%d/submission/%s/candidate", model.Session.Id, submissionId) }
		hx-trigger="load"
		class="flex gap-5"
	></li>
}

templ VoteListCandidate(model SessionTemplateModel, submission db.SubmissionDataModel, track spotify.Track) {
	if model.IsUserSubmission(submission.Id) {
		<button
			disabled
		></button>
	} else if model.GetSubmissionVoteId(submission.Id) != "" {
		<button
			hx-delete={ fmt.Sprintf("/app/session/%d/vote/%s", model.Session.Id, model.GetSubmissionVoteId(submission.Id)) }
			hx-target="closest li"
			hx-swap="outerHTML"
		>★</button>
	} else {
		<button
			hx-post={ fmt.Sprintf("/app/session/%d/vote", model.Session.Id) }
			hx-vals={ fmt.Sprintf(`{"submissionId": "%s"}`, submission.Id) }
			hx-target="closest li"
			hx-swap="outerHTML"
		>☆</button>
	}
	<div class="flex flex-col">
		<p>{ track.Name }</p>
		<p class="text-slate-400">{ utils.MapJoin(track.Artists, ", ", func(artist spotify.TrackArtist) string {return artist.Name} ) }</p>
	</div>
}

templ SubmissionForm(model SessionTemplateModel) {
	<h2>Submit Your Shit</h2>
	<h3
		hx-get={ fmt.Sprintf("/app/session/%s/submission/time-left", model.SessionId()) }
		hx-trigger="load, every 1m"
	></h3>
	<h2>Your Submissions</h2>
	<ul
		id={ SubmissionListId }
	>
		for _, submission := range model.Submissions() {
			@LazyLoadSubmissionListItem(model, submission)
		}
	</ul>
	@SubmissionCounter(model, "")
	@SubmissionSearchBar(model, "")
}

templ LazyLoadSubmissionListItem(model SessionTemplateModel, submission db.SubmissionDataModel) {
	<div
		hx-get={ fmt.Sprintf("/app/session/%d/submission/%s", model.Session.Id, submission.Id) }
		hx-trigger="load"
		hx-swap="outerHTML"
	></div>
}

templ SubmissionListItem(model SessionTemplateModel, submission db.SubmissionDataModel, track spotify.Track) {
	<li class="flex gap-5">
		<button
			hx-delete={ fmt.Sprintf("/app/session/%d/submission/%s", model.Session.Id, submission.Id) }
			hx-target="closest li"
			hx-swap="delete"
		>X</button>
		<div class="flex flex-col">
			<p>{ track.Name }</p>
			<p class="text-slate-400">{ utils.MapJoin(track.Artists, ", ", func(artist spotify.TrackArtist) string {return artist.Name} ) }</p>
		</div>
	</li>
}

templ SubmissionCounter(model SessionTemplateModel, swapOob string) {
	<h2
		id={ SubmissionCounterId }
		hx-swap-oob={ swapOob }
	>
		if model.SubmissionsLeft() > 0 {
			{ strconv.Itoa(model.SubmissionsLeft()) } submissions left
		} else {
			Submissions maxed out, nice
		}
	</h2>
}

templ SubmissionSearchBar(model SessionTemplateModel, swapOob string) {
	<div
		id={ SubmissionSearchBarId }
		hx-swap-oob={ swapOob }
	>
		if model.SubmissionsLeft() > 0 {
			<input
				hx-post={ fmt.Sprintf("/app/session/%d/tracks", model.Session.Id) }
				hx-trigger="input changed delay:500ms, search"
				hx-target={ fmt.Sprintf("#%s", SubmissionSearchBarResultsId) }
				hx-select={ "#" + SubmissionSearchBarResultsId }
				hx-swap="outerHTML"
				type="search"
				name="query"
				placeholder="Begin Typing To Search Tracks..."
				class="w-full p-2"
			/>
			<div
				id={ SubmissionSearchBarResultsId }
			>
				for _, track := range  model.SearchResult.Tracks.Items {
					<div class="flex gap-5">
						<button
							hx-post={ fmt.Sprintf("/app/session/%d/submission", model.Session.Id) }
							hx-vals={ fmt.Sprintf(`{"trackId": "%s"}`, track.Id) }
							hx-target="closest div"
							hx-swap="delete"
						>Add</button>
						<div class="flex flex-col">
							<p>{ track.Name }</p>
							<p class="text-slate-400">{ utils.MapJoin(track.Artists, ", ", func(artist spotify.SearchResultArtist) string {return artist.Name} ) }</p>
						</div>
					</div>
				}
			</div>
		}
	</div>
}

templ NewSubmission(model SessionTemplateModel, submission db.SubmissionDataModel) {
	<ul
		hx-swap-oob={ fmt.Sprintf("beforeend:#%s", SubmissionListId) }
	>
		@LazyLoadSubmissionListItem(model, submission)
	</ul>
	@SubmissionCounter(model, "true")
	if model.SubmissionsLeft() <= 0 {
		<div
			id={ SubmissionSearchBarId }
			hx-swap-oob="true"
		></div>
	}
}

templ DeleteSubmission(model SessionTemplateModel) {
	if model.SubmissionsLeft() == 1 {
		@SubmissionSearchBar(model, "true")
	}
	@SubmissionCounter(model, "true")
}
