package templates

import (
	"fmt"
	"github.com/CaribouBlue/top-spot/model"
	"github.com/CaribouBlue/top-spot/spotify"
	"github.com/CaribouBlue/top-spot/utils"
	"strconv"
	"time"
)

const (
	SessionDetailsId             string = "session-details"
	SubmissionListId             string = "submission-list"
	SubmissionCounterId          string = "submission-counter"
	SubmissionSearchBarId        string = "submission-search-bar"
	SubmissionSearchBarResultsId string = "submission-search-bar-results"
)

type SessionPhase string

const (
	SubmissionPhase SessionPhase = "Submission"
	VotePhase       SessionPhase = "Vote"
	ResultsPhase    SessionPhase = "Results"
)

type SessionTemplateModel struct {
	Session      model.SessionModel
	User         model.UserModel
	SearchResult spotify.SearchResult
	SearchQuery  string
}

func (m SessionTemplateModel) Submissions() []model.SubmissionData {
	submissions := make([]model.SubmissionData, 0)
	for _, submission := range m.Session.Data.Submissions {
		if submission.UserId == m.User.Id() {
			submissions = append(submissions, submission)
		}
	}
	return submissions
}

func (m SessionTemplateModel) SubmissionsLeft() int {
	return m.Session.Data.MaxSubmissions - len(m.Submissions())
}

func (m SessionTemplateModel) SessionId() string {
	return strconv.FormatInt(m.Session.Id(), 10)
}

func (m SessionTemplateModel) SessionPhase() SessionPhase {
	switch {
	case m.Session.Phase() == model.SubmissionPhase:
		return SubmissionPhase
	case m.Session.Phase() == model.VotePhase:
		return VotePhase
	default:
		return ResultsPhase
	}
}

func (m SessionTemplateModel) TimeLeft() string {
	var duration time.Duration = m.Session.PhaseDurationRemaining()

	days := int(duration.Hours()) / 24
	hours := int(duration.Hours()) % 24
	minutes := int(duration.Minutes()) % 60
	_ = int(duration.Seconds()) % 60

	if duration.Seconds() <= 0 {
		return ""
	}
	return fmt.Sprintf("%02dd %02dh %02dm", days, hours, minutes)
}

func (m SessionTemplateModel) GetSubmissionVoteId(submissionId string) string {
	for _, vote := range m.Session.Data.Votes {
		if vote.UserId == m.User.Id() && vote.SubmissionId == submissionId {
			return vote.Id
		}
	}
	return ""
}

func (m SessionTemplateModel) IsUserSubmission(submissionId string) bool {
	for _, submission := range m.Session.Data.Submissions {
		if submission.Id == submissionId && submission.UserId == m.User.Id() {
			return true
		}
	}
	return false
}

func NewSessionTemplateModel(session model.SessionModel, user model.UserModel) SessionTemplateModel {
	return SessionTemplateModel{
		Session: session,
		User:    user,
	}
}

templ Session(model SessionTemplateModel, swapOob string) {
	@root(RootProps{Title: "Session " + model.SessionId()}) {
		<div
			id={ SessionDetailsId }
			hx-swap-oob={ swapOob }
		>
			<h1>Session { model.SessionId() }</h1>
			switch model.SessionPhase() {
				case SubmissionPhase:
					@SubmissionForm(model)
				case VotePhase:
					@VoteForm(model)
				case ResultsPhase:
					<h2>Results</h2>
			}
		</div>
	}
}

templ SessionPhaseTimeLeft(model SessionTemplateModel) {
	if model.TimeLeft() != "" {
		<p>{ model.TimeLeft() } left</p>
	} else {
		@Session(model, "true")
	}
}

templ VoteForm(m SessionTemplateModel) {
	<h2>Vote</h2>
	<h3
		hx-get={ fmt.Sprintf("/app/session/%s/vote/time-left", m.SessionId()) }
		hx-trigger="load, every 1m"
	></h3>
	@LazyLoadVotePlaylistButton(m)
	<ul>
		for _, submission := range m.Session.Data.Submissions {
			@LazyLoadVoteCandidate(m, submission.Id)
		}
	</ul>
}

templ LazyLoadVotePlaylistButton(m SessionTemplateModel) {
	<div
		hx-get={ fmt.Sprintf("/app/session/%d/playlist", m.Session.Id()) }
		hx-trigger="load"
		hx-swap="outerHTML"
	></div>
}

templ VotePlaylistButton(m SessionTemplateModel, playlistUrl string) {
	if playlistUrl != "" {
		<a
			href={ templ.SafeURL(playlistUrl) }
			target="_blank"
		>
			Open Playlist
		</a>
	} else {
		<button
			hx-post={ fmt.Sprintf("/app/session/%d/playlist", m.Session.Id()) }
		>
			Create Playlist
		</button>
	}
}

templ LazyLoadVoteCandidate(m SessionTemplateModel, submissionId string) {
	<li
		hx-get={ fmt.Sprintf("/app/session/%d/submission/%s/candidate", m.Session.Id(), submissionId) }
		hx-trigger="load"
		class="flex gap-5"
	></li>
}

templ VoteListCandidate(m SessionTemplateModel, submission model.SubmissionData, track spotify.Track) {
	if m.IsUserSubmission(submission.Id) {
		<button
			disabled
		></button>
	} else if m.GetSubmissionVoteId(submission.Id) != "" {
		<button
			hx-delete={ fmt.Sprintf("/app/session/%d/vote/%s", m.Session.Id(), m.GetSubmissionVoteId(submission.Id)) }
			hx-target="closest li"
			hx-swap="outerHTML"
		>★</button>
	} else {
		<button
			hx-post={ fmt.Sprintf("/app/session/%d/vote", m.Session.Id()) }
			hx-vals={ fmt.Sprintf(`{"submissionId": "%s"}`, submission.Id) }
			hx-target="closest li"
			hx-swap="outerHTML"
		>☆</button>
	}
	<div class="flex flex-col">
		<p>{ track.Name }</p>
		<p class="text-slate-400">{ utils.MapJoin(track.Artists, ", ", func(artist spotify.TrackArtist) string {return artist.Name} ) }</p>
	</div>
}

templ SubmissionForm(m SessionTemplateModel) {
	<h2>Submit Your Shit</h2>
	<h3
		hx-get={ fmt.Sprintf("/app/session/%s/submission/time-left", m.SessionId()) }
		hx-trigger="load, every 1m"
	></h3>
	<h2>Your Submissions</h2>
	<ul
		id={ SubmissionListId }
	>
		for _, submission := range m.Submissions() {
			@LazyLoadSubmissionListItem(m, submission)
		}
	</ul>
	@SubmissionCounter(m, "")
	@SubmissionSearchBar(m, "")
}

templ LazyLoadSubmissionListItem(m SessionTemplateModel, submission model.SubmissionData) {
	<div
		hx-get={ fmt.Sprintf("/app/session/%d/submission/%s", m.Session.Id(), submission.Id) }
		hx-trigger="load"
		hx-swap="outerHTML"
	></div>
}

templ SubmissionListItem(m SessionTemplateModel, submission model.SubmissionData, track spotify.Track) {
	<li class="flex gap-5">
		<button
			hx-delete={ fmt.Sprintf("/app/session/%d/submission/%s", m.Session.Id(), submission.Id) }
			hx-target="closest li"
			hx-swap="delete"
		>X</button>
		<div class="flex flex-col">
			<p>{ track.Name }</p>
			<p class="text-slate-400">{ utils.MapJoin(track.Artists, ", ", func(artist spotify.TrackArtist) string {return artist.Name} ) }</p>
		</div>
	</li>
}

templ SubmissionCounter(m SessionTemplateModel, swapOob string) {
	<h2
		id={ SubmissionCounterId }
		hx-swap-oob={ swapOob }
	>
		if m.SubmissionsLeft() > 0 {
			{ strconv.Itoa(m.SubmissionsLeft()) } submissions left
		} else {
			Submissions maxed out, nice
		}
	</h2>
}

templ SubmissionSearchBar(m SessionTemplateModel, swapOob string) {
	<div
		id={ SubmissionSearchBarId }
		hx-swap-oob={ swapOob }
	>
		if m.SubmissionsLeft() > 0 {
			<input
				hx-post={ fmt.Sprintf("/app/session/%d/tracks", m.Session.Id()) }
				hx-trigger="input changed delay:500ms, search"
				hx-target={ fmt.Sprintf("#%s", SubmissionSearchBarResultsId) }
				hx-select={ "#" + SubmissionSearchBarResultsId }
				hx-swap="outerHTML"
				type="search"
				name="query"
				placeholder="Begin Typing To Search Tracks..."
				class="w-full p-2"
			/>
			<div
				id={ SubmissionSearchBarResultsId }
			>
				for _, track := range  m.SearchResult.Tracks.Items {
					<div class="flex gap-5">
						<button
							hx-post={ fmt.Sprintf("/app/session/%d/submission", m.Session.Id()) }
							hx-vals={ fmt.Sprintf(`{"trackId": "%s"}`, track.Id) }
							hx-target="closest div"
							hx-swap="delete"
						>Add</button>
						<div class="flex flex-col">
							<p>{ track.Name }</p>
							<p class="text-slate-400">{ utils.MapJoin(track.Artists, ", ", func(artist spotify.SearchResultArtist) string {return artist.Name} ) }</p>
						</div>
					</div>
				}
			</div>
		}
	</div>
}

templ NewSubmission(m SessionTemplateModel, submission model.SubmissionData) {
	<ul
		hx-swap-oob={ fmt.Sprintf("beforeend:#%s", SubmissionListId) }
	>
		@LazyLoadSubmissionListItem(m, submission)
	</ul>
	@SubmissionCounter(m, "true")
	if m.SubmissionsLeft() <= 0 {
		<div
			id={ SubmissionSearchBarId }
			hx-swap-oob="true"
		></div>
	}
}

templ DeleteSubmission(m SessionTemplateModel) {
	if m.SubmissionsLeft() == 1 {
		@SubmissionSearchBar(m, "true")
	}
	@SubmissionCounter(m, "true")
}
