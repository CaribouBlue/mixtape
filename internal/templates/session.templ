package templates

import (
	"fmt"
	"github.com/CaribouBlue/mixtape/internal/core"
	serverUtils "github.com/CaribouBlue/mixtape/internal/server/utils"
	"time"
)

const (
	IdAttrSessionPage                      string = "session-page"
	IdAttrCandidateSubmission              string = "candidate-submissions"
	IdAttrCandidateSubmissionSearchResults string = "candidate-submission-search-results"
	IdAttrCandidateSubmissionsActions      string = "candidate-submissions-actions"
	IdAttrFinalizeSubmissionsButton        string = "finalize-submissions-button"
)

// Session Page Templates
templ SessionPage(s core.SessionDto) {
	@Root(RootProps{Title: "Session " + s.Name, IsAuthenticated: true}) {
		<div
			id={ IdAttrSessionPage }
			class="grid grid-cols-1 gap-4"
		>
			<div class="col-span-full">
				<h1 class="text-2xl">{ s.Name }</h1>
			</div>
			<div class="col-span-full">
				@SessionTimeline(s)
			</div>
			<div class="col-span-full">
				@CollapsibleCard("Players", s.Phase() == core.SubmissionPhase) {
					<div class="">
						<table class="table">
							<tbody class="grid grid-cols-[min-content_1fr] gap-4">
								for _, player := range *s.Players {
									<tr class="col-span-full grid grid-cols-subgrid">
										<td class="col-span-full grid grid-cols-subgrid">
											<div class="flex items-center gap-2">
												if player.PlayerId == s.CurrentPlayer.PlayerId {
													@PersonIcon(NewIconProps())
												}
												if player.PlayerId == s.CreatedBy {
													@HouseIcon(NewIconProps())
												}
												{ player.DisplayName }
											</div>
											<div class="flex flex-wrap items-center gap-2">
												if player.IsSubmissionsFinalized {
													<div class="badge badge-info badge-outline whitespace-nowrap">
														<div class="tooltip" data-tip="Finalized Submissions">
															@EnvelopeWithCheckIcon(NewIconProps(withClass("fill-info")))
														</div>
													</div>
												}
											</div>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				}
			</div>
			<div class="col-span-full">
				switch s.Phase() {
					case core.SubmissionPhase:
						@SubmissionPhaseView(s)
					case core.VotePhase:
						@VotePhaseView(s)
					case core.ResultPhase:
						@ResultsPhaseView(s)
				}
			</div>
		</div>
	}
}

templ SessionTimeline(s core.SessionDto) {
	<ul class="timeline">
		<li class="grow">
			if s.Phase() == core.SubmissionPhase {
				<div class="timeline-start">
					<p
						hx-get={ fmt.Sprintf("/app/session/%d/phase-duration", s.Id) }
						hx-trigger="every 1m"
					>
						@SessionPhaseDuration(s.SessionEntity)
					</p>
				</div>
			}
			<div class="timeline-middle">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 20 20"
					fill="currentColor"
					class="text-primary h-5 w-5"
				>
					<path
						fill-rule="evenodd"
						d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
						clip-rule="evenodd"
					></path>
				</svg>
			</div>
			<div class="timeline-end timeline-box">Submission</div>
			<hr
				if s.Phase() != core.SubmissionPhase {
					class="bg-primary"
				}
			/>
		</li>
		<li class="grow">
			<hr
				if s.Phase() != core.SubmissionPhase {
					class="bg-primary"
				}
			/>
			if s.Phase() == core.VotePhase {
				<div class="timeline-start">
					<p
						hx-get={ fmt.Sprintf("/app/session/%d/phase-duration", s.Id) }
						hx-trigger="every 1m"
					>
						@SessionPhaseDuration(s.SessionEntity)
					</p>
				</div>
			}
			<div class="timeline-middle">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 20 20"
					fill="currentColor"
					if s.Phase() != core.SubmissionPhase {
						class="text-primary h-5 w-5"
					} else {
						class="h-5 w-5"
					}
				>
					<path
						fill-rule="evenodd"
						d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
						clip-rule="evenodd"
					></path>
				</svg>
			</div>
			<div class="timeline-end timeline-box">Voting</div>
			<hr
				if s.Phase() == core.ResultPhase {
					class="bg-primary"
				}
			/>
		</li>
		<li class="grow">
			<hr
				if s.Phase() == core.ResultPhase {
					class="bg-primary"
				}
			/>
			<div class="timeline-middle">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 20 20"
					fill="currentColor"
					if s.Phase() == core.ResultPhase {
						class="text-primary h-5 w-5"
					} else {
						class="h-5 w-5"
					}
				>
					<path
						fill-rule="evenodd"
						d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
						clip-rule="evenodd"
					></path>
				</svg>
			</div>
			<div class="timeline-end timeline-box">Results</div>
		</li>
	</ul>
}

// Submission Phase View Templates
templ SubmissionPhaseView(s core.SessionDto) {
	if !s.CurrentPlayer.IsJoinedSession() {
		<button
			hx-post={ fmt.Sprintf("/app/session/%d/player/me", s.Id) }
			hx-target="body"
			hx-swap="outerHTML"
			hx-disabled-elt="this"
			class="btn btn-wide w-full"
		>
			Join Session
		</button>
	} else {
		<div
			x-data={ fmt.Sprintf("{ submissionCount: %d, maxSubmissions: %d }", len(*s.SubmittedCandidates), s.MaxSubmissions) }
			{ templ.Attributes{
				fmt.Sprintf("@%s.document", serverUtils.EventNewSubmission): "submissionCount++",
				fmt.Sprintf("@%s.document", serverUtils.EventDeleteSubmission): "submissionCount--",
			}... }
			class="col-span-full flex flex-col gap-4 p-4 border rounded-2xl"
		>
			<h2
				class="text-lg"
			>Your Submissions </h2>
			if !s.CurrentPlayer.IsSubmissionsFinalized {
				<p
					class="text-sm"
				>
					<span x-html="`${submissionCount}/${maxSubmissions}`"></span>
				</p>
			}
			<div class="overflow-x-auto">
				<table id={ IdAttrCandidateSubmission } class="table">
					<tbody>
						for _, candidate := range *s.SubmittedCandidates {
							@SubmissionItem(candidate, s.CurrentPlayer.IsSubmissionsFinalized)
						}
					</tbody>
				</table>
			</div>
			<div id={ IdAttrCandidateSubmissionsActions }>
				if len(*s.SubmittedCandidates) < s.MaxSubmissions {
					@CandidateSubmissionSearchBar(s.Id)
				} else {
					@FinalizeSubmissionsButton(s.Id, s.CurrentPlayer.IsSubmissionsFinalized)
				}
			</div>
		</div>
	}
}

templ CandidateSubmissionSearchBar(sessionId int64) {
	<input
		hx-get={ fmt.Sprintf("/app/session/%d/submission-search", sessionId) }
		hx-trigger="input changed delay:500ms, search"
		hx-target={ fmt.Sprintf("#%s", IdAttrCandidateSubmissionSearchResults) }
		class="input input-bordered w-full mb-4"
		type="search"
		name="query"
		placeholder="Begin Typing To Search Tracks..."
	/>
	<div class="overflow-x-auto">
		<table id={ IdAttrCandidateSubmissionSearchResults } class="table"></table>
	</div>
}

templ CandidateSubmissionSearchResults(candidates []core.CandidateDto) {
	<tbody hx-ext="response-targets">
		for _, candidate := range candidates {
			<tr
				x-data="{ error: '' }"
				@error.stop="error = $event.detail?.data"
				x-effect="error && setTimeout(() => error = '', 2000)"
			>
				<td>
					<div
						role="alert"
						class="alert alert-error absolute left-0"
						x-show="!!error"
						x-transition
					>
						@XCircleIcon()
						<span
							x-init="
							const observer = new MutationObserver((mutationRecordArray) => {
								for (const record of mutationRecordArray) {
									if (record.addedNodes.length && $el.innerHTML != error) {
										const data = $el.innerHTML
										$dispatch('error', { data })
									}
								}
							});
							observer.observe($el, { attributes: false, childList: true, subtree: true, characterData: true  });
							"
						></span>
					</div>
					<button
						hx-post={ fmt.Sprintf("/app/session/%d/candidate", candidate.SessionId) }
						hx-vals={ fmt.Sprintf(`{"trackId": "%s"}`, candidate.Track.Id) }
						hx-disabled-elt="this"
						hx-target="closest tr"
						hx-target-422="previous span"
						class="btn"
					>
						@PlusIcon(NewIconProps())
					</button>
				</td>
				<td class="grid grid-cols-1 md:grid-cols-3 md:gap-2">
					<div class="flex items-center gap-2 font-medium">
						<a
							href={ templ.SafeURL(candidate.Track.Url) }
							target="_blank"
						>
							{ candidate.Track.Name }
						</a>
						if candidate.Track.Explicit {
							@ExplicitIcon()
						}
					</div>
					<div class="text-base-content/70">
						<a
							href={ templ.SafeURL(candidate.Track.Album.Url) }
							target="_blank"
						>
							{ candidate.Track.Album.Name }
						</a>
					</div>
					<div class="text-base-content/70">
						for i, artist := range candidate.Track.Artists {
							<a
								href={ templ.SafeURL(artist.Url) }
								target="_blank"
							>
								if i < len(candidate.Track.Artists)-1 {
									{ artist.Name + ", " }
								} else {
									{ artist.Name }
								}
							</a>
						}
					</div>
				</td>
			</tr>
		}
	</tbody>
}

templ FinalizeSubmissionsButton(sessionId int64, isSubmissionsFinalized bool) {
	if isSubmissionsFinalized {
		<button
			class="btn btn-primary w-full"
			disabled
		>
			Submissions Finalized
		</button>
	} else {
		<button
			id={ IdAttrFinalizeSubmissionsButton }
			hx-post={ fmt.Sprintf("/app/session/%d/player/me/finalize-submissions", sessionId) }
			hx-target="body"
			hx-swap="outerHTML"
			hx-disabled-elt="this"
			class="btn btn-primary w-full"
		>
			@requestSpinner(SpinnerOpts{Size: SpinnerSizeS}) {
				Finalize Submissions
			}
		</button>
	}
}

templ SubmissionItem(candidate core.CandidateDto, isFinalized bool) {
	<tr>
		if !isFinalized {
			<td>
				<div>
					<button
						hx-delete={ fmt.Sprintf("/app/session/%d/candidate/%d", candidate.SessionId, candidate.Id) }
						hx-target="closest tr"
						hx-swap="delete"
						hx-disabled-elt="this"
						class="btn"
					>
						@TrashCanIcon(NewIconProps())
					</button>
				</div>
			</td>
		}
		<td class="grid grid-cols-1 md:grid-cols-3 md:gap-2">
			<div class="flex items-center gap-2 font-medium">
				<a
					href={ templ.SafeURL(candidate.Track.Url) }
					target="_blank"
				>
					{ candidate.Track.Name }
				</a>
				if candidate.Track.Explicit {
					@ExplicitIcon()
				}
			</div>
			<div class="text-base-content/70">
				<a
					href={ templ.SafeURL(candidate.Track.Album.Url) }
					target="_blank"
				>
					{ candidate.Track.Album.Name }
				</a>
			</div>
			<div class="text-base-content/70">
				for i, artist := range candidate.Track.Artists {
					<a
						href={ templ.SafeURL(artist.Url) }
						target="_blank"
					>
						if i < len(candidate.Track.Artists)-1 {
							{ artist.Name + ", " }
						} else {
							{ artist.Name }
						}
					</a>
				}
			</div>
		</td>
	</tr>
}

templ AddSubmission(session core.SessionDto, candidate core.CandidateDto) {
	<tbody
		hx-swap-oob={ fmt.Sprintf("beforeend:#%s tbody", IdAttrCandidateSubmission) }
	>
		@SubmissionItem(candidate, session.CurrentPlayer.IsSubmissionsFinalized)
	</tbody>
	if session.SubmissionsRemaining() == 0 {
		<div
			id={ IdAttrCandidateSubmissionsActions }
			hx-swap-oob="true"
		>
			@FinalizeSubmissionsButton(session.Id, session.CurrentPlayer.IsSubmissionsFinalized)
		</div>
	}
}

templ RemoveSubmission(session core.SessionDto) {
	if session.SubmissionsRemaining() == 1 {
		<div
			id={ IdAttrCandidateSubmissionsActions }
			hx-swap-oob="true"
		>
			@CandidateSubmissionSearchBar(session.Id)
		</div>
	}
}

// Vote Phase View Templates
templ VotePhaseView(s core.SessionDto) {
	if !s.CurrentPlayer.IsJoinedSession() {
		@SessionClosedCard()
	} else {
		<div class="col-span-full grid grid-cols-subgrid gap-4">
			@PlaylistButton(s.Id, s.CurrentPlayer.PlaylistUrl)
			@CollapsibleCard("Your Submissions", false) {
				<div class="overflow-x-auto">
					<table class="table">
						<tbody>
							for _, candidate := range *s.SubmittedCandidates {
								@CandidateBallot(candidate, false)
							}
						</tbody>
					</table>
				</div>
			}
			<div class="col-span-full grid grid-cols-subgrid gap-4 p-4 border rounded-2xl">
				<div
					x-data={ fmt.Sprintf("{ voteCount: %d, maxVotes: %d }", s.VoteCount(), s.MaxVotes()) }
					{ templ.Attributes{
						fmt.Sprintf("@%s.document", serverUtils.EventNewVote): "voteCount++",
						fmt.Sprintf("@%s.document", serverUtils.EventDeleteVote): "voteCount--",
					}... }
				>
					<h1 class="text-xl">Your Ballot</h1>
					<p
						class="text-sm"
					>
						<span x-html="`${voteCount}/${maxVotes}`"></span>
					</p>
				</div>
				<div class="overflow-x-auto">
					<table
						class="table"
					>
						<tbody hx-ext="response-targets">
							for _, candidate := range *s.BallotCandidates {
								@CandidateBallot(candidate, true)
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	}
}

templ CandidateBallot(candidate core.CandidateDto, canVote bool) {
	<tr
		x-data="{ error: '' }"
		@error.stop="error = $event.detail?.data"
		x-effect="error && setTimeout(() => error = '', 2000)"
	>
		if canVote {
			<td>
				<div
					role="alert"
					class="alert alert-error absolute left-0 flex"
					x-show="!!error"
					x-transition
				>
					@XCircleIcon()
					<span
						x-init="
							const observer = new MutationObserver((mutationRecordArray) => {
								for (const record of mutationRecordArray) {
									if (record.addedNodes.length && $el.innerHTML != error) {
										const data = $el.innerHTML
										$dispatch('error', { data })
									}
								}
							});
							observer.observe($el, { attributes: false, childList: true, subtree: true, characterData: true  });
							"
					></span>
				</div>
				if candidate.Vote != nil {
					<button
						hx-delete={ fmt.Sprintf("/app/session/%d/candidate/%d/vote", candidate.SessionId, candidate.Id) }
						hx-target="closest tr"
						hx-target-422="previous span"
						hx-swap="outerHTML"
						hx-disabled-elt="this"
						class="btn"
					>
						@requestSpinner(SpinnerOpts{Size: SpinnerSizeXs}) {
							@HeartFilledIcon(NewIconProps(withClass("fill-red-500")))
						}
					</button>
				} else {
					<button
						hx-post={ fmt.Sprintf("/app/session/%d/candidate/%d/vote", candidate.SessionId, candidate.Id) }
						hx-target="closest tr"
						hx-target-422="previous span"
						hx-swap="outerHTML"
						hx-disabled-elt="this"
						class="btn"
					>
						@requestSpinner(SpinnerOpts{Size: SpinnerSizeXs}) {
							@HeartIcon(NewIconProps())
						}
					</button>
				}
			</td>
		}
		<td class="grid grid-cols-1 md:grid-cols-3 md:gap-2">
			<div class="flex items-center gap-2 text-medium">
				<a
					href={ templ.SafeURL(candidate.Track.Url) }
					target="_blank"
				>
					{ candidate.Track.Name }
				</a>
				if candidate.Track.Explicit {
					@ExplicitIcon()
				}
			</div>
			<div class="text-base-content/70">
				<a
					href={ templ.SafeURL(candidate.Track.Album.Url) }
					target="_blank"
				>
					{ candidate.Track.Album.Name }
				</a>
			</div>
			<div class="text-base-content/70">
				for i, artist := range candidate.Track.Artists {
					<a
						href={ templ.SafeURL(artist.Url) }
						target="_blank"
					>
						if i < len(candidate.Track.Artists)-1 {
							{ artist.Name + ", " }
						} else {
							{ artist.Name }
						}
					</a>
				}
			</div>
		</td>
	</tr>
}

templ VoteCounter(s core.SessionDto) {
	{ fmt.Sprintf("%d/%d", s.VoteCount(), s.MaxVotes()) }
}

// Results Phase View Templates
templ ResultsPhaseView(s core.SessionDto) {
	if !s.CurrentPlayer.IsJoinedSession() {
		@SessionClosedCard()
	} else {
		<div class="col-span-full grid grid-cols-subgrid gap-4">
			@PlaylistButton(s.Id, s.CurrentPlayer.PlaylistUrl)
			<div class="col-span-full grid grid-cols-subgrid gap-4 p-4 border rounded-2xl">
				<h1 class="text-xl">Final Results</h1>
				<div class="overflow-x-auto">
					<table class="table">
						<tbody>
							for _, result := range *s.Results {
								@Result(result)
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	}
}

func PlaceDisplayText(place int) string {
	if place < 0 {
		return "-"
	}

	var ending string
	simplifiedPlace := place % 100

	if simplifiedPlace > 10 && simplifiedPlace < 20 {
		ending = "th"
	} else {
		switch simplifiedPlace % 10 {
		case 1:
			ending = "st"
		case 2:
			ending = "nd"
		case 3:
			ending = "rd"
		default:
			ending = "th"
		}
	}

	return fmt.Sprintf("%d%s", place, ending)
}

templ Result(result core.CandidateDto) {
	<tr>
		<td
			class="w-0 text-center"
		>
			{ PlaceDisplayText(result.Place) }
		</td>
		<td>{ fmt.Sprint(result.Nominator.DisplayName) }</td>
		<td>
			<div class="flex items-center gap-2">
				<a
					href={ templ.SafeURL(result.Track.Url) }
					target="_blank"
				>
					{ result.Track.Name }
				</a>
				if result.Track.Explicit {
					@ExplicitIcon()
				}
			</div>
		</td>
		<td>
			<a
				href={ templ.SafeURL(result.Track.Album.Url) }
				target="_blank"
			>
				{ result.Track.Album.Name }
			</a>
		</td>
		<td>
			for i, artist := range result.Track.Artists {
				<a
					href={ templ.SafeURL(artist.Url) }
					target="_blank"
				>
					if i < len(result.Track.Artists)-1 {
						{ artist.Name + ", " }
					} else {
						{ artist.Name }
					}
				</a>
			}
		</td>
	</tr>
}

// Shared Templates
func PhaseDurationDisplay(s core.SessionEntity) string {
	var duration time.Duration = s.RemainingPhaseDuration()

	days := int(duration.Hours()) / 24
	hours := int(duration.Hours()) % 24
	minutes := int(duration.Minutes()) % 60
	_ = int(duration.Seconds()) % 60

	if duration.Seconds() <= 0 {
		return ""
	}
	return fmt.Sprintf("%02dd %02dh %02dm", days, hours, minutes)
}

templ SessionPhaseDuration(s core.SessionEntity) {
	if s.Phase() != core.ResultPhase {
		{ PhaseDurationDisplay(s) }
	}
}

templ PlaylistButton(sessionId int64, playlistUrl string) {
	if playlistUrl == "" {
		<button
			hx-post={ fmt.Sprintf("/app/session/%d/player/me/playlist", sessionId) }
			hx-swap="outerHTML"
			hx-disabled-elt="this"
			class="btn btn-wide w-full"
		>
			@requestSpinner(SpinnerOpts{Size: SpinnerSizeS}) {
				Create Playlist
			}
		</button>
	} else {
		<a
			href={ templ.SafeURL(playlistUrl) }
			target="_blank"
			class="btn btn-wide w-full"
		>
			Open Playlist
		</a>
	}
}

templ SessionClosedCard() {
	<div class="card w-full border">
		<div class="card-body items-center text-center gap-4">
			<h2 class="card-title">Session closed!</h2>
			<p>This session is currently closed to new players. You can only join a session during the "Submission Phase".</p>
			<div class="card-actions justify-end">
				<button
					onclick="history.back()"
					class="btn btn-primary btn-wide"
				>
					Got it
				</button>
				<button
					x-data="{ btnTxt: `That's lame` }"
					@click="btnTxt = `Tough titties`; $el.disabled = true"
					class="btn btn-wide"
				>
					<span x-html="btnTxt"></span>
				</button>
			</div>
		</div>
	</div>
}
