package templates

import (
	"fmt"
	"github.com/CaribouBlue/mixtape/internal/core"
	serverUtils "github.com/CaribouBlue/mixtape/internal/server/utils"
	"time"
)

const (
	IdAttrSessionPage                      string = "session-page"
	IdAttrCandidateSubmission              string = "candidate-submissions"
	IdAttrCandidateSubmissionSearchResults string = "candidate-submission-search-results"
)

// Session Page Templates
templ SessionPage(s core.SessionDto) {
	@Root(RootProps{Title: "Session " + s.Name, IsAuthenticated: true}) {
		<div
			id={ IdAttrSessionPage }
			class="grid grid-cols-1 gap-4"
		>
			<div class="col-span-full">
				<h1 class="text-2xl">{ s.Name }</h1>
			</div>
			<div class="col-span-full">
				@SessionTimeline(s)
			</div>
			<div class="col-span-full">
				switch s.Phase() {
					case core.SubmissionPhase:
						@SubmissionPhaseView(s)
					case core.VotePhase:
						@VotePhaseView(s)
					case core.ResultPhase:
						@ResultsPhaseView(s)
				}
			</div>
		</div>
	}
}

templ SessionTimeline(s core.SessionDto) {
	<ul class="timeline">
		<li class="grow">
			if s.Phase() == core.SubmissionPhase {
				<div class="timeline-start">
					<p
						hx-get={ fmt.Sprintf("/app/session/%d/phase-duration", s.Id) }
						hx-trigger="every 1m"
					>
						@SessionPhaseDuration(s.SessionEntity)
					</p>
				</div>
			}
			<div class="timeline-middle">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 20 20"
					fill="currentColor"
					class="text-primary h-5 w-5"
				>
					<path
						fill-rule="evenodd"
						d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
						clip-rule="evenodd"
					></path>
				</svg>
			</div>
			<div class="timeline-end timeline-box">Submissions</div>
			<hr
				if s.Phase() != core.SubmissionPhase {
					class="bg-primary"
				}
			/>
		</li>
		<li class="grow">
			<hr
				if s.Phase() != core.SubmissionPhase {
					class="bg-primary"
				}
			/>
			if s.Phase() == core.VotePhase {
				<div class="timeline-start">
					<p
						hx-get={ fmt.Sprintf("/app/session/%d/phase-duration", s.Id) }
						hx-trigger="every 1m"
					>
						@SessionPhaseDuration(s.SessionEntity)
					</p>
				</div>
			}
			<div class="timeline-middle">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 20 20"
					fill="currentColor"
					if s.Phase() != core.SubmissionPhase {
						class="text-primary h-5 w-5"
					} else {
						class="h-5 w-5"
					}
				>
					<path
						fill-rule="evenodd"
						d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
						clip-rule="evenodd"
					></path>
				</svg>
			</div>
			<div class="timeline-end timeline-box">Voting</div>
			<hr
				if s.Phase() == core.ResultPhase {
					class="bg-primary"
				}
			/>
		</li>
		<li class="grow">
			<hr
				if s.Phase() == core.ResultPhase {
					class="bg-primary"
				}
			/>
			<div class="timeline-middle">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 20 20"
					fill="currentColor"
					if s.Phase() == core.ResultPhase {
						class="text-primary h-5 w-5"
					} else {
						class="h-5 w-5"
					}
				>
					<path
						fill-rule="evenodd"
						d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
						clip-rule="evenodd"
					></path>
				</svg>
			</div>
			<div class="timeline-end timeline-box">Results</div>
		</li>
	</ul>
}

// Submission Phase View Templates
templ SubmissionPhaseView(s core.SessionDto) {
	if !s.CurrentPlayer.IsJoinedSession() {
		<button
			hx-post={ fmt.Sprintf("/app/session/%d/player/me", s.Id) }
			hx-swap="outerHTML"
			class="btn btn-wide w-full"
		>
			Join Session
		</button>
	} else {
		<div class="col-span-full grid grid-cols-subgrid gap-4">
			<div>
				<h2
					class="text-lg"
				>Your Submissions </h2>
				<p
					hx-get={ fmt.Sprintf("/app/session/%d/submission-counter", s.Id) }
					hx-trigger={ fmt.Sprintf("%s from:body, %s from:body", serverUtils.EventNewSubmission, serverUtils.EventDeleteSubmission) }
					class="text-sm"
				>
					@SubmissionCounter(s)
				</p>
			</div>
			<div class="overflow-x-auto">
				<table id={ IdAttrCandidateSubmission } class="table">
					<tbody>
						for _, candidate := range *s.SubmittedCandidates {
							@SubmissionItem(candidate)
						}
					</tbody>
				</table>
			</div>
			<input
				hx-get={ fmt.Sprintf("/app/session/%d/submission-search", s.Id) }
				hx-trigger="input changed delay:500ms, search"
				hx-target={ fmt.Sprintf("#%s", IdAttrCandidateSubmissionSearchResults) }
				class="input input-bordered w-full"
				type="search"
				name="query"
				placeholder="Begin Typing To Search Tracks..."
			/>
			<div class="overflow-x-auto">
				<table id={ IdAttrCandidateSubmissionSearchResults } class="table"></table>
			</div>
		</div>
	}
}

templ SubmissionCounter(s core.SessionDto) {
	{ fmt.Sprintf("%d/%d", len(*s.SubmittedCandidates), s.MaxSubmissions) }
}

templ CandidateSubmissionSearchResults(candidates []core.CandidateDto) {
	<tbody hx-ext="response-targets">
		for _, candidate := range candidates {
			<tr
				x-data="{ error: '' }"
				@error.stop="error = $event.detail?.data"
				x-effect="error && setTimeout(() => error = '', 2000)"
			>
				<td class="w-0">
					<div
						role="alert"
						class="alert alert-error absolute left-0"
						x-show="!!error"
						x-transition
					>
						@XCircleIcon()
						<span
							x-init="
							const observer = new MutationObserver((mutationRecordArray) => {
								for (const record of mutationRecordArray) {
									if (record.addedNodes.length && $el.innerHTML != error) {
										const data = $el.innerHTML
										$dispatch('error', { data })
									}
								}
							});
							observer.observe($el, { attributes: false, childList: true, subtree: true, characterData: true  });
							"
						></span>
					</div>
					<button
						hx-post={ fmt.Sprintf("/app/session/%d/candidate", candidate.SessionId) }
						hx-vals={ fmt.Sprintf(`{"trackId": "%s"}`, candidate.Track.Id) }
						hx-target="closest tr"
						hx-target-422="previous span"
						class="btn"
					>Add</button>
				</td>
				<td>
					<div class="flex items-center gap-2">
						<a
							href={ templ.SafeURL(candidate.Track.Url) }
							target="_blank"
						>
							{ candidate.Track.Name }
						</a>
						if candidate.Track.Explicit {
							@ExplicitIcon()
						}
					</div>
				</td>
				<td>
					<a
						href={ templ.SafeURL(candidate.Track.Album.Url) }
						target="_blank"
					>
						{ candidate.Track.Album.Name }
					</a>
				</td>
				<td>
					for i, artist := range candidate.Track.Artists {
						<a
							href={ templ.SafeURL(artist.Url) }
							target="_blank"
						>
							if i < len(candidate.Track.Artists)-1 {
								{ artist.Name + ", " }
							} else {
								{ artist.Name }
							}
						</a>
					}
				</td>
			</tr>
		}
	</tbody>
}

templ SubmissionItem(candidate core.CandidateDto) {
	<tr>
		<td class="w-0">
			<button
				hx-delete={ fmt.Sprintf("/app/session/%d/candidate/%d", candidate.SessionId, candidate.Id) }
				hx-target="closest tr"
				hx-swap="delete"
				class="btn"
			>Remove</button>
		</td>
		<td>
			<div class="flex items-center gap-2">
				<a
					href={ templ.SafeURL(candidate.Track.Url) }
					target="_blank"
				>
					{ candidate.Track.Name }
				</a>
				if candidate.Track.Explicit {
					@ExplicitIcon()
				}
			</div>
		</td>
		<td>
			<a
				href={ templ.SafeURL(candidate.Track.Album.Url) }
				target="_blank"
			>
				{ candidate.Track.Album.Name }
			</a>
		</td>
		<td>
			for i, artist := range candidate.Track.Artists {
				<a
					href={ templ.SafeURL(artist.Url) }
					target="_blank"
				>
					if i < len(candidate.Track.Artists)-1 {
						{ artist.Name + ", " }
					} else {
						{ artist.Name }
					}
				</a>
			}
		</td>
	</tr>
}

templ AddSubmission(candidate core.CandidateDto) {
	<tbody
		hx-swap-oob={ fmt.Sprintf("beforeend:#%s tbody", IdAttrCandidateSubmission) }
	>
		@SubmissionItem(candidate)
	</tbody>
}

// Vote Phase View Templates
templ VotePhaseView(s core.SessionDto) {
	if !s.CurrentPlayer.IsJoinedSession() {
		@SessionClosedCard()
	} else {
		<div class="col-span-full grid grid-cols-subgrid gap-4">
			@PlaylistButton(s.CurrentPlayer.PlaylistUrl)
			<div
				x-data="{ open: false }"
				class="collapse collapse-arrow bg-base-200"
			>
				<input
					x-bind:checked="open"
					@click="open = !open"
					type="radio"
					name="session-accordion"
					class="cursor-pointer"
				/>
				<div
					class="collapse-title text-lg"
				>Your Submissions</div>
				<div class="collapse-content">
					<div class="overflow-x-auto">
						<table class="table">
							<tbody>
								for _, candidate := range *s.SubmittedCandidates {
									@CandidateBallot(candidate, false)
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
			<div>
				<h1 class="text-xl">Your Ballot</h1>
				<p
					hx-get={ fmt.Sprintf("/app/session/%d/vote-counter", s.Id) }
					hx-trigger={ fmt.Sprintf("%s from:body, %s from:body", serverUtils.EventNewVote, serverUtils.EventDeleteVote) }
					class="text-sm"
				>
					@VoteCounter(s)
				</p>
			</div>
			<div class="overflow-x-auto">
				<table
					class="table"
				>
					<tbody hx-ext="response-targets">
						for _, candidate := range *s.BallotCandidates {
							@CandidateBallot(candidate, true)
						}
					</tbody>
				</table>
			</div>
		</div>
	}
}

templ CandidateBallot(candidate core.CandidateDto, canVote bool) {
	<tr
		x-data="{ error: '' }"
		@error.stop="error = $event.detail?.data"
		x-effect="error && setTimeout(() => error = '', 2000)"
	>
		if canVote {
			<td>
				<div
					role="alert"
					class="alert alert-error absolute left-0"
					x-show="!!error"
					x-transition
				>
					@XCircleIcon()
					<span
						x-init="
							const observer = new MutationObserver((mutationRecordArray) => {
								for (const record of mutationRecordArray) {
									if (record.addedNodes.length && $el.innerHTML != error) {
										const data = $el.innerHTML
										$dispatch('error', { data })
									}
								}
							});
							observer.observe($el, { attributes: false, childList: true, subtree: true, characterData: true  });
							"
					></span>
				</div>
				if candidate.Vote != nil {
					<button
						hx-delete={ fmt.Sprintf("/app/session/%d/candidate/%d/vote", candidate.SessionId, candidate.Id) }
						hx-target="closest tr"
						hx-target-422="previous span"
						hx-swap="outerHTML"
						hx-disabled-elt="this"
						class="btn btn-wide btn-success"
					>
						@requestSpinner(SpinnerOpts{Size: SpinnerSizeXs}) {
							@CheckIcon()
						}
					</button>
				} else {
					<button
						hx-post={ fmt.Sprintf("/app/session/%d/candidate/%d/vote", candidate.SessionId, candidate.Id) }
						hx-target="closest tr"
						hx-target-422="previous span"
						hx-swap="outerHTML"
						hx-disabled-elt="this"
						class="btn btn-wide"
					>
						@requestSpinner(SpinnerOpts{Size: SpinnerSizeXs}) {
							Vote
						}
					</button>
				}
			</td>
		}
		<td>
			<div class="flex items-center gap-2">
				<a
					href={ templ.SafeURL(candidate.Track.Url) }
					target="_blank"
				>
					{ candidate.Track.Name }
				</a>
				if candidate.Track.Explicit {
					@ExplicitIcon()
				}
			</div>
		</td>
		<td>
			<a
				href={ templ.SafeURL(candidate.Track.Album.Url) }
				target="_blank"
			>
				{ candidate.Track.Album.Name }
			</a>
		</td>
		<td>
			for i, artist := range candidate.Track.Artists {
				<a
					href={ templ.SafeURL(artist.Url) }
					target="_blank"
				>
					if i < len(candidate.Track.Artists)-1 {
						{ artist.Name + ", " }
					} else {
						{ artist.Name }
					}
				</a>
			}
		</td>
	</tr>
}

templ VoteCounter(s core.SessionDto) {
	{ fmt.Sprintf("%d/%d", s.VoteCount(), s.MaxVotes()) }
}

// Results Phase View Templates
templ ResultsPhaseView(s core.SessionDto) {
	if !s.CurrentPlayer.IsJoinedSession() {
		@SessionClosedCard()
	} else {
		<div class="col-span-full grid grid-cols-subgrid gap-4">
			@PlaylistButton(s.CurrentPlayer.PlaylistUrl)
			<h1 class="text-xl">Final Results</h1>
			<div class="overflow-x-auto">
				<table class="table">
					<tbody>
						for _, result := range *s.Results {
							@Result(result)
						}
					</tbody>
				</table>
			</div>
		</div>
	}
}

func PlaceDisplayText(place int) string {
	if place < 0 {
		return "-"
	}

	var ending string
	simplifiedPlace := place % 100

	if simplifiedPlace > 10 && simplifiedPlace < 20 {
		ending = "th"
	} else {
		switch simplifiedPlace % 10 {
		case 1:
			ending = "st"
		case 2:
			ending = "nd"
		case 3:
			ending = "rd"
		default:
			ending = "th"
		}
	}

	return fmt.Sprintf("%d%s", place, ending)
}

templ Result(result core.CandidateDto) {
	<tr>
		<td
			class="w-0 text-center"
		>
			{ PlaceDisplayText(result.Place) }
		</td>
		<td>{ fmt.Sprint(result.Nominator.DisplayName) }</td>
		<td>
			<div class="flex items-center gap-2">
				<a
					href={ templ.SafeURL(result.Track.Url) }
					target="_blank"
				>
					{ result.Track.Name }
				</a>
				if result.Track.Explicit {
					@ExplicitIcon()
				}
			</div>
		</td>
		<td>
			<a
				href={ templ.SafeURL(result.Track.Album.Url) }
				target="_blank"
			>
				{ result.Track.Album.Name }
			</a>
		</td>
		<td>
			for i, artist := range result.Track.Artists {
				<a
					href={ templ.SafeURL(artist.Url) }
					target="_blank"
				>
					if i < len(result.Track.Artists)-1 {
						{ artist.Name + ", " }
					} else {
						{ artist.Name }
					}
				</a>
			}
		</td>
	</tr>
}

// Shared Templates
func PhaseDurationDisplay(s core.SessionEntity) string {
	var duration time.Duration = s.RemainingPhaseDuration()

	days := int(duration.Hours()) / 24
	hours := int(duration.Hours()) % 24
	minutes := int(duration.Minutes()) % 60
	_ = int(duration.Seconds()) % 60

	if duration.Seconds() <= 0 {
		return ""
	}
	return fmt.Sprintf("%02dd %02dh %02dm", days, hours, minutes)
}

templ SessionPhaseDuration(s core.SessionEntity) {
	if s.Phase() != core.ResultPhase {
		{ PhaseDurationDisplay(s) }
	}
}

templ PlaylistButton(playlistUrl string) {
	<a
		href={ templ.SafeURL(playlistUrl) }
		target="_blank"
		class="btn btn-wide w-full"
	>
		Open Playlist
	</a>
}

templ SessionClosedCard() {
	<div class="card w-full border">
		<div class="card-body items-center text-center gap-4">
			<h2 class="card-title">Session closed!</h2>
			<p>This session is currently closed to new players. You can only join a session during the "Submission Phase".</p>
			<div class="card-actions justify-end">
				<button
					onclick="history.back()"
					class="btn btn-primary btn-wide"
				>
					Got it
				</button>
				<button
					x-data="{ btnTxt: `That's lame` }"
					@click="btnTxt = `Tough titties`; $el.disabled = true"
					class="btn btn-wide"
				>
					<span x-html="btnTxt"></span>
				</button>
			</div>
		</div>
	</div>
}
