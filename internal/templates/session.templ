package templates

import (
	"fmt"
	"github.com/CaribouBlue/top-spot/internal/entities/music"
	"github.com/CaribouBlue/top-spot/internal/entities/session"
	"github.com/CaribouBlue/top-spot/internal/entities/user"
	serverUtils "github.com/CaribouBlue/top-spot/internal/server/utils"
	"github.com/CaribouBlue/top-spot/internal/utils"
	"time"
)

const (
	SessionDetailsId               string = "session-details"
	IdSubmissionsTable             string = "submissions-table"
	SubmissionCounterId            string = "submission-counter"
	SubmissionSearchBarId          string = "submission-search-bar"
	IdSubmissionSearchResultsTable string = "submission-search-results-table"
)

// Session Page Templates
templ SessionPage(s session.Session, u user.User) {
	@Root(RootProps{Title: "Session " + s.Name, IsAuthenticated: true}) {
		<div
			id={ SessionDetailsId }
			class="grid grid-cols-1 gap-4"
		>
			<h1 class="text-2xl">{ s.Name }</h1>
			@SessionTimeline(s)
			switch s.Phase() {
				case session.SubmissionPhase:
					@SubmissionPhaseView(s, u)
				case session.VotePhase:
					@VotePhaseView(s)
				case session.ResultPhase:
					@ResultsPhaseView(s)
			}
		</div>
	}
}

templ SessionTimeline(s session.Session) {
	<ul class="timeline">
		<li class="grow">
			if s.Phase() == session.SubmissionPhase {
				<div class="timeline-start">
					<p
						hx-get={ fmt.Sprintf("/app/session/%d/phase-duration", s.Id) }
						hx-trigger="every 1m"
					>
						@SessionPhaseDuration(s)
					</p>
				</div>
			}
			<div class="timeline-middle">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 20 20"
					fill="currentColor"
					class="text-primary h-5 w-5"
				>
					<path
						fill-rule="evenodd"
						d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
						clip-rule="evenodd"
					></path>
				</svg>
			</div>
			<div class="timeline-end timeline-box">Submissions</div>
			<hr
				if s.Phase() != session.SubmissionPhase {
					class="bg-primary"
				}
			/>
		</li>
		<li class="grow">
			<hr
				if s.Phase() != session.SubmissionPhase {
					class="bg-primary"
				}
			/>
			if s.Phase() == session.VotePhase {
				<div class="timeline-start">
					<p
						hx-get={ fmt.Sprintf("/app/session/%d/phase-duration", s.Id) }
						hx-trigger="every 1m"
					>
						@SessionPhaseDuration(s)
					</p>
				</div>
			}
			<div class="timeline-middle">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 20 20"
					fill="currentColor"
					if s.Phase() != session.SubmissionPhase {
						class="text-primary h-5 w-5"
					} else {
						class="h-5 w-5"
					}
				>
					<path
						fill-rule="evenodd"
						d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
						clip-rule="evenodd"
					></path>
				</svg>
			</div>
			<div class="timeline-end timeline-box">Voting</div>
			<hr
				if s.Phase() == session.ResultPhase {
					class="bg-primary"
				}
			/>
		</li>
		<li class="grow">
			<hr
				if s.Phase() == session.ResultPhase {
					class="bg-primary"
				}
			/>
			<div class="timeline-middle">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					viewBox="0 0 20 20"
					fill="currentColor"
					if s.Phase() == session.ResultPhase {
						class="text-primary h-5 w-5"
					} else {
						class="h-5 w-5"
					}
				>
					<path
						fill-rule="evenodd"
						d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z"
						clip-rule="evenodd"
					></path>
				</svg>
			</div>
			<div class="timeline-end timeline-box">Results</div>
		</li>
	</ul>
}

// Submission Phase View Templates
templ SubmissionPhaseView(s session.Session, u user.User) {
	<div>
		<h2
			class="text-lg"
		>Your Submissions </h2>
		<p
			hx-get={ fmt.Sprintf("/app/session/%d/submission-counter", s.Id) }
			hx-trigger={ fmt.Sprintf("%s from:body, %s from:body", serverUtils.EventNewSubmission, serverUtils.EventDeleteSubmission) }
			class="text-sm"
		>
			@SubmissionCounter(s, u)
		</p>
	</div>
	<div class="overflow-x-auto">
		<table id={ IdSubmissionsTable } class="table">
			<tbody>
				for _, submission := range s.SubmissionsByUser(u.Id) {
					<tr
						hx-get={ fmt.Sprintf("/app/session/%d/submission/%s", s.Id, submission.Id) }
						hx-trigger="load"
						hx-swap="outerHTML"
						hx-target="this"
					></tr>
				}
			</tbody>
		</table>
	</div>
	<input
		hx-get={ fmt.Sprintf("/app/session/%d/tracks/search", s.Id) }
		hx-trigger="input changed delay:500ms, search"
		hx-target={ fmt.Sprintf("#%s", IdSubmissionSearchResultsTable) }
		class="input input-bordered w-full"
		type="search"
		name="query"
		placeholder="Begin Typing To Search Tracks..."
	/>
	<div class="overflow-x-auto">
		<table id={ IdSubmissionSearchResultsTable } class="table"></table>
	</div>
}

templ SubmissionCounter(s session.Session, u user.User) {
	{ fmt.Sprintf("%d/%d", len(s.SubmissionsByUser(u.Id)), s.MaxSubmissions) }
}

templ SubmissionSearchResults(s session.Session, searchResult []music.Track) {
	<tbody hx-ext="response-targets">
		for _, track := range searchResult {
			<tr
				x-data="{ error: '' }"
				@error.stop="error = $event.detail?.data"
				x-effect="error && setTimeout(() => error = '', 2000)"
			>
				<td class="w-0">
					<div
						role="alert"
						class="alert alert-error absolute left-0"
						x-show="!!error"
						x-transition
					>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							class="h-6 w-6 shrink-0 stroke-current"
							fill="none"
							viewBox="0 0 24 24"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
							></path>
						</svg>
						<span
							x-init="
							const observer = new MutationObserver((mutationRecordArray) => {
								for (const record of mutationRecordArray) {
									if (record.addedNodes.length && $el.innerHTML != error) {
										const data = $el.innerHTML
										$dispatch('error', { data })
									}
								}
							});
							observer.observe($el, { attributes: false, childList: true, subtree: true, characterData: true  });
							"
						></span>
					</div>
					<button
						hx-post={ fmt.Sprintf("/app/session/%d/submission", s.Id) }
						hx-vals={ fmt.Sprintf(`{"trackId": "%s"}`, track.Id) }
						hx-target="closest tr"
						hx-target-422="previous span"
						class="btn"
					>Add</button>
				</td>
				<td>
					<div class="flex items-center gap-2">
						<a
							href={ templ.SafeURL(track.Url) }
							target="_blank"
						>
							{ track.Name }
						</a>
						if track.Explicit {
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-explicit" viewBox="0 0 16 16">
								<path d="M6.826 10.88H10.5V12h-5V4.002h5v1.12H6.826V7.4h3.457v1.073H6.826z"></path>
								<path d="M2.5 0A2.5 2.5 0 0 0 0 2.5v11A2.5 2.5 0 0 0 2.5 16h11a2.5 2.5 0 0 0 2.5-2.5v-11A2.5 2.5 0 0 0 13.5 0zM1 2.5A1.5 1.5 0 0 1 2.5 1h11A1.5 1.5 0 0 1 15 2.5v11a1.5 1.5 0 0 1-1.5 1.5h-11A1.5 1.5 0 0 1 1 13.5z"></path>
							</svg>
						}
					</div>
				</td>
				<td>
					<a
						href={ templ.SafeURL(track.Album.Url) }
						target="_blank"
					>
						{ track.Album.Name }
					</a>
				</td>
				<td>
					for i, artist := range track.Artists {
						<a
							href={ templ.SafeURL(artist.Url) }
							target="_blank"
						>
							if i < len(track.Artists)-1 {
								{ artist.Name + ", " }
							} else {
								{ artist.Name }
							}
						</a>
					}
				</td>
			</tr>
		}
	</tbody>
}

templ SubmissionItem(s session.Session, submission session.Submission, track music.Track) {
	<tr>
		<td class="w-0">
			<button
				hx-delete={ fmt.Sprintf("/app/session/%d/submission/%s", s.Id, submission.Id) }
				hx-target="closest tr"
				hx-swap="delete"
				class="btn"
			>Remove</button>
		</td>
		<td>
			<div class="flex items-center gap-2">
				<a
					href={ templ.SafeURL(track.Url) }
					target="_blank"
				>
					{ track.Name }
				</a>
				if track.Explicit {
					<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-explicit" viewBox="0 0 16 16">
						<path d="M6.826 10.88H10.5V12h-5V4.002h5v1.12H6.826V7.4h3.457v1.073H6.826z"></path>
						<path d="M2.5 0A2.5 2.5 0 0 0 0 2.5v11A2.5 2.5 0 0 0 2.5 16h11a2.5 2.5 0 0 0 2.5-2.5v-11A2.5 2.5 0 0 0 13.5 0zM1 2.5A1.5 1.5 0 0 1 2.5 1h11A1.5 1.5 0 0 1 15 2.5v11a1.5 1.5 0 0 1-1.5 1.5h-11A1.5 1.5 0 0 1 1 13.5z"></path>
					</svg>
				}
			</div>
		</td>
		<td>
			<a
				href={ templ.SafeURL(track.Album.Url) }
				target="_blank"
			>
				{ track.Album.Name }
			</a>
		</td>
		<td>
			for i, artist := range track.Artists {
				<a
					href={ templ.SafeURL(artist.Url) }
					target="_blank"
				>
					if i < len(track.Artists)-1 {
						{ artist.Name + ", " }
					} else {
						{ artist.Name }
					}
				</a>
			}
		</td>
	</tr>
}

templ AddSubmission(s session.Session, u user.User, submission session.Submission, track music.Track) {
	<tbody
		hx-swap-oob={ fmt.Sprintf("beforeend:#%s tbody", IdSubmissionsTable) }
	>
		@SubmissionItem(s, submission, track)
	</tbody>
}

// Vote Phase View Templates
templ VotePhaseView(s session.Session) {
	@LazyLoadPlaylistButton(s)
	<ul>
		for _, submission := range s.Submissions {
			@LazyLoadVoteCandidate(s, submission.Id)
		}
	</ul>
}

templ LazyLoadPlaylistButton(s session.Session) {
	<div
		hx-get={ fmt.Sprintf("/app/session/%d/playlist", s.Id) }
		hx-trigger="load"
		hx-swap="outerHTML"
	>
		@spinner(SpinnerOpts{Size: SpinnerSizeS})
	</div>
}

templ PlaylistButton(s session.Session, playlist music.Playlist) {
	if playlist.Id != "" {
		<a
			href={ templ.SafeURL(playlist.Url) }
			target="_blank"
		>
			Open Playlist
		</a>
	} else {
		<button
			hx-post={ fmt.Sprintf("/app/session/%d/playlist", s.Id) }
			hx-swap="outerHTML"
		>
			@requestSpinner(SpinnerOpts{Size: SpinnerSizeS}) {
				Create Playlist
			}
		</button>
	}
}

templ LazyLoadVoteCandidate(s session.Session, submissionId string) {
	<div
		hx-get={ fmt.Sprintf("/app/session/%d/submission/%s/candidate", s.Id, submissionId) }
		hx-trigger="load"
		hx-swap="outerHTML"
	>
		<li class="flex gap-5">
			@spinner(SpinnerOpts{Size: SpinnerSizeS})
		</li>
	</div>
}

templ VoteCandidate(s session.Session, u user.User, submission session.Submission, track music.Track) {
	<li class="flex gap-5">
		if u.Id == submission.UserId {
			<button
				disabled
			></button>
		} else if vote := s.SubmissionVoteByUser(u.Id, submission.Id); vote.Id != "" {
			<button
				hx-delete={ fmt.Sprintf("/app/session/%d/vote/%s", s.Id, vote.Id) }
				hx-target="closest li"
				hx-swap="outerHTML"
				hx-disabled-elt="this"
			>
				@requestSpinner(SpinnerOpts{Size: SpinnerSizeXs}) {
					★
				}
			</button>
		} else {
			<button
				hx-post={ fmt.Sprintf("/app/session/%d/vote", s.Id) }
				hx-vals={ fmt.Sprintf(`{"submissionId": "%s"}`, submission.Id) }
				hx-target="closest li"
				hx-swap="outerHTML"
				hx-disabled-elt="this"
			>
				@requestSpinner(SpinnerOpts{Size: SpinnerSizeXs}) {
					☆
				}
			</button>
		}
		<div class="flex flex-col">
			<p>{ track.Name }</p>
			<p class="text-slate-400">{ utils.MapJoin(track.Artists, ", ", func(artist music.Artist) string {return artist.Name} ) }</p>
		</div>
	</li>
}

// Results Phase View Templates
templ ResultsPhaseView(s session.Session) {
	@LazyLoadPlaylistButton(s)
	<br/>
	<table>
		<tr>
			<th>Place </th>
			<th>Track </th>
			<th>User </th>
		</tr>
		for _, result := range s.Results {
			@LazyLoadResult(s, result)
		}
	</table>
}

templ LazyLoadResult(s session.Session, result session.Result) {
	<tr
		hx-get={ fmt.Sprintf("/app/session/%d/result/%s", s.Id, result.Id) }
		hx-trigger="load"
		hx-swap="outerHTML"
	></tr>
}

templ Result(s session.Session, result session.Result, submission session.Submission, track music.Track, owner user.User) {
	<tr>
		<td>{ fmt.Sprint(result.Place) }</td>
		<td>
			<a
				href={ templ.SafeURL(track.Url) }
				target="_blank"
			>{ fmt.Sprint(track.Name) + " | " + utils.MapJoin(track.Artists, ", ", func(artist music.Artist) string {return artist.Name} ) }</a>
		</td>
		<td>{ fmt.Sprint(owner.Username) }</td>
	</tr>
}

// Shared Templates
func PhaseDurationDisplay(s session.Session) string {
	var duration time.Duration = s.RemainingPhaseDuration()

	days := int(duration.Hours()) / 24
	hours := int(duration.Hours()) % 24
	minutes := int(duration.Minutes()) % 60
	_ = int(duration.Seconds()) % 60

	if duration.Seconds() <= 0 {
		return ""
	}
	return fmt.Sprintf("%02dd %02dh %02dm", days, hours, minutes)
}

templ SessionPhaseDuration(s session.Session) {
	if s.Phase() != session.ResultPhase {
		{ PhaseDurationDisplay(s) }
	}
}
