package templates

import (
	"fmt"
	"github.com/CaribouBlue/top-spot/internal/entities/music"
	"github.com/CaribouBlue/top-spot/internal/entities/session"
	"github.com/CaribouBlue/top-spot/internal/entities/user"
	"github.com/CaribouBlue/top-spot/internal/utils"
	"strconv"
	"time"
)

const (
	SessionDetailsId             string = "session-details"
	SubmissionListId             string = "submission-list"
	SubmissionCounterId          string = "submission-counter"
	SubmissionSearchBarId        string = "submission-search-bar"
	SubmissionSearchBarResultsId string = "submission-search-bar-results"
)

// Session Page Templates
templ SessionPage(s session.Session, u user.User) {
	@root(RootProps{Title: "Session " + s.Name}) {
		<div
			id={ SessionDetailsId }
		>
			<h1>Session: { s.Name }</h1>
			switch s.Phase() {
				case session.SubmissionPhase:
					@SubmissionPhaseView(s, u)
				case session.VotePhase:
					@VotePhaseView(s)
				case session.ResultPhase:
					@ResultsPhaseView(s)
			}
		</div>
	}
}

// Submission Phase View Templates
templ SubmissionPhaseView(s session.Session, u user.User) {
	<h2>Phase: Submission</h2>
	<h3
		hx-get={ fmt.Sprintf("/app/session/%d/phase-duration", s.Id) }
		hx-trigger="load, every 1m"
	></h3>
	@SubmissionCounter(s, u, "")
	<ul
		id={ SubmissionListId }
	>
		for _, submission := range s.SubmissionsByUser(u.Id) {
			@LazyLoadSubmissionItem(s, submission)
		}
	</ul>
	@SubmissionSearchBar(s, u, []music.Track{}, "")
}

templ LazyLoadSubmissionItem(s session.Session, submission session.Submission) {
	<div
		hx-get={ fmt.Sprintf("/app/session/%d/submission/%s", s.Id, submission.Id) }
		hx-trigger="load"
		hx-swap="outerHTML"
	></div>
}

templ SubmissionItem(s session.Session, submission session.Submission, track music.Track) {
	<li class="flex gap-5">
		<button
			hx-delete={ fmt.Sprintf("/app/session/%d/submission/%s", s.Id, submission.Id) }
			hx-target="closest li"
			hx-swap="delete"
		>X</button>
		<div class="flex flex-col">
			<p>{ track.Name }</p>
			<p class="text-slate-400">{ utils.MapJoin(track.Artists, ", ", func(artist music.Artist) string {return artist.Name} ) }</p>
		</div>
	</li>
}

templ SubmissionCounter(s session.Session, u user.User, swapOob string) {
	<h2
		id={ SubmissionCounterId }
		hx-swap-oob={ swapOob }
	>
		if s.SubmissionsLeft(u.Id) > 0 {
			{ strconv.Itoa(s.SubmissionsLeft(u.Id)) } submissions left
		} else {
			Submissions maxed out, nice
		}
	</h2>
}

templ SubmissionSearchBar(s session.Session, u user.User, searchResult []music.Track, swapOob string) {
	<div
		id={ SubmissionSearchBarId }
		hx-swap-oob={ swapOob }
	>
		if s.SubmissionsLeft(u.Id) > 0 {
			<input
				hx-post={ fmt.Sprintf("/app/session/%d/tracks", s.Id) }
				hx-trigger="input changed delay:500ms, search"
				hx-target={ fmt.Sprintf("#%s", SubmissionSearchBarResultsId) }
				hx-select={ "#" + SubmissionSearchBarResultsId }
				hx-swap="outerHTML"
				type="search"
				name="query"
				placeholder="Begin Typing To Search Tracks..."
				class="w-full p-2"
			/>
			<div
				id={ SubmissionSearchBarResultsId }
			>
				for _, track := range  searchResult {
					<div class="flex gap-5">
						<button
							hx-post={ fmt.Sprintf("/app/session/%d/submission", s.Id) }
							hx-vals={ fmt.Sprintf(`{"trackId": "%s"}`, track.Id) }
							hx-target="closest div"
							hx-swap="delete"
						>Add</button>
						<div class="flex flex-col">
							<p>{ track.Name }</p>
							<p class="text-slate-400">{ utils.MapJoin(track.Artists, ", ", func(artist music.Artist) string {return artist.Name} ) }</p>
						</div>
					</div>
				}
			</div>
		}
	</div>
}

templ NewSubmission(s session.Session, u user.User, submission session.Submission) {
	<ul
		hx-swap-oob={ fmt.Sprintf("beforeend:#%s", SubmissionListId) }
	>
		@LazyLoadSubmissionItem(s, submission)
	</ul>
	@SubmissionCounter(s, u, "true")
	if s.SubmissionsLeft(u.Id) <= 0 {
		<div
			id={ SubmissionSearchBarId }
			hx-swap-oob="true"
		></div>
	}
}

templ DeleteSubmission(s session.Session, u user.User) {
	if s.SubmissionsLeft(u.Id) == 1 {
		@SubmissionSearchBar(s, u, []music.Track{}, "true")
	}
	@SubmissionCounter(s, u, "true")
}

// Vote Phase View Templates
templ VotePhaseView(s session.Session) {
	<h2>Phase: Vote</h2>
	<h3
		hx-get={ fmt.Sprintf("/app/session/%d/phase-duration", s.Id) }
		hx-trigger="load, every 1m"
	></h3>
	@LazyLoadPlaylistButton(s)
	<ul>
		for _, submission := range s.Submissions {
			@LazyLoadVoteCandidate(s, submission.Id)
		}
	</ul>
}

templ LazyLoadPlaylistButton(s session.Session) {
	<div
		hx-get={ fmt.Sprintf("/app/session/%d/playlist", s.Id) }
		hx-trigger="load"
		hx-swap="outerHTML"
	>
		@spinner(SpinnerOpts{Size: SpinnerSizeS})
	</div>
}

templ PlaylistButton(s session.Session, playlist music.Playlist) {
	if playlist.Id != "" {
		<a
			href={ templ.SafeURL(playlist.Url) }
			target="_blank"
		>
			Open Playlist
		</a>
	} else {
		<button
			hx-post={ fmt.Sprintf("/app/session/%d/playlist", s.Id) }
			hx-swap="outerHTML"
		>
			@requestSpinner(SpinnerOpts{Size: SpinnerSizeS}) {
				Create Playlist
			}
		</button>
	}
}

templ LazyLoadVoteCandidate(s session.Session, submissionId string) {
	<div
		hx-get={ fmt.Sprintf("/app/session/%d/submission/%s/candidate", s.Id, submissionId) }
		hx-trigger="load"
		hx-swap="outerHTML"
	>
		<li class="flex gap-5">
			@spinner(SpinnerOpts{Size: SpinnerSizeS})
		</li>
	</div>
}

templ VoteCandidate(s session.Session, u user.User, submission session.Submission, track music.Track) {
	<li class="flex gap-5">
		if u.Id == submission.UserId {
			<button
				disabled
			></button>
		} else if vote := s.SubmissionVoteByUser(u.Id, submission.Id); vote.Id != "" {
			<button
				hx-delete={ fmt.Sprintf("/app/session/%d/vote/%s", s.Id, vote.Id) }
				hx-target="closest li"
				hx-swap="outerHTML"
				hx-disabled-elt="this"
			>
				@requestSpinner(SpinnerOpts{Size: SpinnerSizeXs}) {
					★
				}
			</button>
		} else {
			<button
				hx-post={ fmt.Sprintf("/app/session/%d/vote", s.Id) }
				hx-vals={ fmt.Sprintf(`{"submissionId": "%s"}`, submission.Id) }
				hx-target="closest li"
				hx-swap="outerHTML"
				hx-disabled-elt="this"
			>
				@requestSpinner(SpinnerOpts{Size: SpinnerSizeXs}) {
					☆
				}
			</button>
		}
		<div class="flex flex-col">
			<p>{ track.Name }</p>
			<p class="text-slate-400">{ utils.MapJoin(track.Artists, ", ", func(artist music.Artist) string {return artist.Name} ) }</p>
		</div>
	</li>
}

// Results Phase View Templates
templ ResultsPhaseView(s session.Session) {
	<h2>Phase: Results</h2>
	@LazyLoadPlaylistButton(s)
	<br/>
	<table>
		<tr>
			<th>Place </th>
			<th>Track </th>
			<th>User </th>
		</tr>
		for _, result := range s.Results {
			@LazyLoadResult(s, result)
		}
	</table>
}

templ LazyLoadResult(s session.Session, result session.Result) {
	<tr
		hx-get={ fmt.Sprintf("/app/session/%d/result/%s", s.Id, result.Id) }
		hx-trigger="load"
		hx-swap="outerHTML"
	></tr>
}

templ Result(s session.Session, result session.Result, submission session.Submission, track music.Track) {
	<tr>
		<td>{ fmt.Sprint(result.Place) }</td>
		<td>
			<a
				href={ templ.SafeURL(track.Url) }
				target="_blank"
			>{ fmt.Sprint(track.Name) + " | " + utils.MapJoin(track.Artists, ", ", func(artist music.Artist) string {return artist.Name} ) }</a>
		</td>
		<td>{ fmt.Sprint(submission.UserId) }</td>
	</tr>
}

// Shared Templates
func PhaseDurationDisplay(s session.Session) string {
	var duration time.Duration = s.RemainingPhaseDuration()

	days := int(duration.Hours()) / 24
	hours := int(duration.Hours()) % 24
	minutes := int(duration.Minutes()) % 60
	_ = int(duration.Seconds()) % 60

	if duration.Seconds() <= 0 {
		return ""
	}
	return fmt.Sprintf("%02dd %02dh %02dm", days, hours, minutes)
}

templ SessionPhaseDuration(s session.Session) {
	<p>{ PhaseDurationDisplay(s) } remaining</p>
}
